plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'
    implementation 'org.slf4j:slf4j-simple:2.0.12'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'com.google.code.gson:gson:2.10.1'
}

tasks.register("generateImageIndex") {
    def imageDirPath = layout.projectDirectory.dir("src/main/resources/images")
    def indexFilePath = layout.projectDirectory.file("src/main/resources/cache/images.txt")

    inputs.dir(imageDirPath)
    outputs.file(indexFilePath)

    doLast {
        def imageDir = imageDirPath.asFile
        def indexFile = indexFilePath.asFile

        if (!imageDir.exists()) {
            println "⚠️ Image directory does not exist: ${imageDir}"
            return
        }

        def lines = []
        imageDir.listFiles()?.each { file ->
            if (file.isFile() && (file.name.endsWith(".png") || file.name.endsWith(".jpg"))) {
                lines << file.name
            }
        }

        indexFile.text = lines.join("\n")
        println "✅ index.txt generated with ${lines.size()} image(s)."
    }
}

application {
    mainClass = 'com.App'
}

shadowJar {
    archiveBaseName.set('executable')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }
}